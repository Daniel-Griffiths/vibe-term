/**
 * Universal communication utility that handles both Electron IPC and web API calls
 * depending on the environment.
 * 
 * This file is AUTO-GENERATED by scripts/generate-communication-api.js
 * Do not edit manually - run the script to regenerate.
 */

import { isElectron } from './environment';

class API {
  private electronAPI: any;

  constructor() {
    if (isElectron) {
      this.electronAPI = (window as any).electronAPI;
    }
  }

  private async callAPI(handlerName: string, args: any[] = []): Promise<any> {
    const response = await fetch(`/api/ipc/${handlerName}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ args })
    });
    return await response.json();
  }

  async startClaudeProcess(arg0: string, arg1: string, arg2?: string, arg3?: string, arg4?: boolean): Promise<PTYResult> {
    return isElectron 
      ? this.electronAPI.startClaudeProcess(arg0, arg1, arg2, arg3, arg4)
      : this.callAPI('start-claude-process', [arg0, arg1, arg2, arg3, arg4]);
  }

  async stopClaudeProcess(arg0: string): Promise<BaseResponse> {
    return isElectron 
      ? this.electronAPI.stopClaudeProcess(arg0)
      : this.callAPI('stop-claude-process', [arg0]);
  }

  async sendInput(arg0: string, arg1: string): Promise<BaseResponse> {
    return isElectron 
      ? this.electronAPI.sendInput(arg0, arg1)
      : this.callAPI('send-input', [arg0, arg1]);
  }

  async testCommand(arg0: string, arg1: string): Promise<CommandResult> {
    return isElectron 
      ? this.electronAPI.testCommand(arg0, arg1)
      : this.callAPI('test-command', [arg0, arg1]);
  }

  async writeStateFile(arg0: AppState): Promise<BaseResponse> {
    return isElectron 
      ? this.electronAPI.writeStateFile(arg0)
      : this.callAPI('write-state-file', [arg0]);
  }

  async saveFile(projectPath: string, filePath: string, content: string): Promise<BaseResponse> {
    return isElectron 
      ? this.electronAPI.saveFile(projectPath, filePath, content)
      : this.callAPI('save-file', [projectPath, filePath, content]);
  }

  async revertFile(projectPath: string, filePath: string): Promise<BaseResponse> {
    return isElectron 
      ? this.electronAPI.revertFile(projectPath, filePath)
      : this.callAPI('revert-file', [projectPath, filePath]);
  }

  async getProjectFiles(projectPath: string): Promise<any> {
    return isElectron 
      ? this.electronAPI.getProjectFiles(projectPath)
      : this.callAPI('get-project-files', [projectPath]);
  }

  async readProjectFile(projectPath: string, filePath: string): Promise<any> {
    return isElectron 
      ? this.electronAPI.readProjectFile(projectPath, filePath)
      : this.callAPI('read-project-file', [projectPath, filePath]);
  }

  async readImageFile(projectPath: string, filePath: string): Promise<any> {
    return isElectron 
      ? this.electronAPI.readImageFile(projectPath, filePath)
      : this.callAPI('read-image-file', [projectPath, filePath]);
  }

  async gitCommit(): Promise<any> {
    return isElectron 
      ? this.electronAPI.gitCommit()
      : this.callAPI('git-commit', []);
  }

  async gitPush(): Promise<any> {
    return isElectron 
      ? this.electronAPI.gitPush()
      : this.callAPI('git-push', []);
  }

  async setSelectedProject(projectPath: string): Promise<any> {
    return isElectron 
      ? this.electronAPI.setSelectedProject(projectPath)
      : this.callAPI('set-selected-project', [projectPath]);
  }

  async getLocalIp(): Promise<any> {
    return isElectron 
      ? this.electronAPI.getLocalIp()
      : this.callAPI('get-local-ip', []);
  }

  async testDiscordNotification(): Promise<any> {
    return isElectron 
      ? this.electronAPI.testDiscordNotification()
      : this.callAPI('test-discord-notification', []);
  }

  async sendDiscordNotification(): Promise<any> {
    return isElectron 
      ? this.electronAPI.sendDiscordNotification()
      : this.callAPI('send-discord-notification', []);
  }

  async getStoredItems(): Promise<any> {
    return isElectron 
      ? this.electronAPI.getStoredItems()
      : this.callAPI('get-stored-items', []);
  }

  async addStoredItem(): Promise<any> {
    return isElectron 
      ? this.electronAPI.addStoredItem()
      : this.callAPI('add-stored-item', []);
  }

  async updateStoredItem(): Promise<any> {
    return isElectron 
      ? this.electronAPI.updateStoredItem()
      : this.callAPI('update-stored-item', []);
  }

  async deleteStoredItem(): Promise<any> {
    return isElectron 
      ? this.electronAPI.deleteStoredItem()
      : this.callAPI('delete-stored-item', []);
  }

  async getAppSettings(): Promise<any> {
    return isElectron 
      ? this.electronAPI.getAppSettings()
      : this.callAPI('get-app-settings', []);
  }

  async updateAppSettings(): Promise<any> {
    return isElectron 
      ? this.electronAPI.updateAppSettings()
      : this.callAPI('update-app-settings', []);
  }

  async getGitDiff(projectPath: string): Promise<any> {
    return isElectron 
      ? this.electronAPI.getGitDiff(projectPath)
      : this.callAPI('get-git-diff', [projectPath]);
  }

  async selectDirectory(): Promise<string | null> {
    return isElectron 
      ? this.electronAPI.selectDirectory()
      : this.callAPI('select-directory', []);
  }


  // Event listener methods (Electron only)
  // For web clients, use webSocketManager from websocket-manager.ts directly
  onTerminalOutput(callback: (data: any) => void): () => void {
    return isElectron ? this.electronAPI.onTerminalOutput(callback) : (() => {});
  }

  onProcessExit(callback: (data: any) => void): () => void {
    return isElectron ? this.electronAPI.onProcessExit(callback) : (() => {});
  }

  onClaudeReady(callback: (data: any) => void): () => void {
    return isElectron ? this.electronAPI.onClaudeReady(callback) : (() => {});
  }

  onClaudeWorking(callback: (data: any) => void): () => void {
    return isElectron ? this.electronAPI.onClaudeWorking(callback) : (() => {});
  }

  onBackgroundOutput(callback: (data: any) => void): () => void {
    return isElectron ? this.electronAPI.onBackgroundOutput(callback) : (() => {});
  }

  onMissingDependencies(callback: (deps: string[]) => void): () => void {
    return isElectron ? this.electronAPI.onMissingDependencies(callback) : (() => {});
  }

  onMainProcessReady(callback: () => void): () => void {
    return isElectron ? this.electronAPI.onMainProcessReady(callback) : (() => {});
  }
}

// Create the unified API instance
export const api = new API();