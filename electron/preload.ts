import { contextBridge, ipcRenderer } from 'electron';

// Auto-generated from IPC handler definitions
// DO NOT EDIT MANUALLY - this file is generated by scripts/generate-preload.js

contextBridge.exposeInMainWorld('electronAPI', {
  startClaudeProcess: (...args: any[]) => 
    ipcRenderer.invoke('start-claude-process', ...args),

  claudeHook: (...args: any[]) => 
    ipcRenderer.invoke('claude-hook', ...args),

  stopClaudeProcess: (...args: any[]) => 
    ipcRenderer.invoke('stop-claude-process', ...args),

  sendInput: (...args: any[]) => 
    ipcRenderer.invoke('send-input', ...args),

  testCommand: (...args: any[]) => 
    ipcRenderer.invoke('test-command', ...args),

  writeStateFile: (...args: any[]) => 
    ipcRenderer.invoke('write-state-file', ...args),

  selectDirectory: (...args: any[]) => 
    ipcRenderer.invoke('select-directory', ...args),

  getGitDiff: (...args: any[]) => 
    ipcRenderer.invoke('get-git-diff', ...args),

  saveFile: (...args: any[]) => 
    ipcRenderer.invoke('save-file', ...args),

  revertFile: (...args: any[]) => 
    ipcRenderer.invoke('revert-file', ...args),

  getProjectFiles: (...args: any[]) => 
    ipcRenderer.invoke('get-project-files', ...args),

  readProjectFile: (...args: any[]) => 
    ipcRenderer.invoke('read-project-file', ...args),

  readImageFile: (...args: any[]) => 
    ipcRenderer.invoke('read-image-file', ...args),

  gitCommit: (...args: any[]) => 
    ipcRenderer.invoke('git-commit', ...args),

  gitPush: (...args: any[]) => 
    ipcRenderer.invoke('git-push', ...args),

  setSelectedProject: (...args: any[]) => 
    ipcRenderer.invoke('set-selected-project', ...args),

  getLocalIp: (...args: any[]) => 
    ipcRenderer.invoke('get-local-ip', ...args),

  testDiscordNotification: (...args: any[]) => 
    ipcRenderer.invoke('test-discord-notification', ...args),

  sendDiscordNotification: (...args: any[]) => 
    ipcRenderer.invoke('send-discord-notification', ...args),

  getStoredItems: (...args: any[]) => 
    ipcRenderer.invoke('get-stored-items', ...args),

  addStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('add-stored-item', ...args),

  updateStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('update-stored-item', ...args),

  deleteStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('delete-stored-item', ...args),

  getAppSettings: (...args: any[]) => 
    ipcRenderer.invoke('get-app-settings', ...args),

  updateAppSettings: (...args: any[]) => 
    ipcRenderer.invoke('update-app-settings', ...args),

  onTerminalOutput: (callback: (data: any) => void) => {
    ipcRenderer.on('terminal-output', (event, data) => {
      console.log(`[Preload Debug] Received terminal-output in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('terminal-output');
  },

  onProcessExit: (callback: (data: any) => void) => {
    ipcRenderer.on('process-exit', (event, data) => {
      console.log(`[Preload Debug] Received process-exit in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('process-exit');
  },

  onClaudeReady: (callback: (data: any) => void) => {
    ipcRenderer.on('claude-ready', (event, data) => {
      console.log(`[Preload Debug] Received claude-ready in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('claude-ready');
  },

  onClaudeWorking: (callback: (data: any) => void) => {
    ipcRenderer.on('claude-working', (event, data) => {
      console.log(`[Preload Debug] Received claude-working in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('claude-working');
  },

  onBackgroundOutput: (callback: (data: any) => void) => {
    ipcRenderer.on('background-output', (event, data) => {
      console.log(`[Preload Debug] Received background-output in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('background-output');
  },

  onMissingDependencies: (callback: (data: any) => void) => {
    ipcRenderer.on('missing-dependencies', (event, data) => {
      console.log(`[Preload Debug] Received missing-dependencies in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('missing-dependencies');
  },

  onMainProcessReady: (callback: (data: any) => void) => {
    ipcRenderer.on('main-process-ready', (event, data) => {
      console.log(`[Preload Debug] Received main-process-ready in preload:`, {
        projectId: data?.projectId,
        dataLength: data?.data?.length,
        dataPreview: data?.data?.substring?.(0, 50)
      });
      callback(data);
    });
    return () => ipcRenderer.removeAllListeners('main-process-ready');
  },
});

export {};
