import { contextBridge, ipcRenderer } from 'electron';

// Auto-generated from IPC handler definitions
// DO NOT EDIT MANUALLY - this file is generated by scripts/generate-preload.js

contextBridge.exposeInMainWorld('electronAPI', {
  startClaudeProcess: (...args: any[]) => 
    ipcRenderer.invoke('start-claude-process', ...args),

  claudeHook: (...args: any[]) => 
    ipcRenderer.invoke('claude-hook', ...args),

  stopClaudeProcess: (...args: any[]) => 
    ipcRenderer.invoke('stop-claude-process', ...args),

  sendInput: (...args: any[]) => 
    ipcRenderer.invoke('send-input', ...args),

  testCommand: (...args: any[]) => 
    ipcRenderer.invoke('test-command', ...args),

  writeStateFile: (...args: any[]) => 
    ipcRenderer.invoke('write-state-file', ...args),

  selectDirectory: (...args: any[]) => 
    ipcRenderer.invoke('select-directory', ...args),

  getGitDiff: (...args: any[]) => 
    ipcRenderer.invoke('get-git-diff', ...args),

  saveFile: (...args: any[]) => 
    ipcRenderer.invoke('save-file', ...args),

  revertFile: (...args: any[]) => 
    ipcRenderer.invoke('revert-file', ...args),

  getProjectFiles: (...args: any[]) => 
    ipcRenderer.invoke('get-project-files', ...args),

  readProjectFile: (...args: any[]) => 
    ipcRenderer.invoke('read-project-file', ...args),

  readImageFile: (...args: any[]) => 
    ipcRenderer.invoke('read-image-file', ...args),

  gitCommit: (...args: any[]) => 
    ipcRenderer.invoke('git-commit', ...args),

  gitPush: (...args: any[]) => 
    ipcRenderer.invoke('git-push', ...args),

  setSelectedProject: (...args: any[]) => 
    ipcRenderer.invoke('set-selected-project', ...args),

  getLocalIp: (...args: any[]) => 
    ipcRenderer.invoke('get-local-ip', ...args),

  testDiscordNotification: (...args: any[]) => 
    ipcRenderer.invoke('test-discord-notification', ...args),

  sendDiscordNotification: (...args: any[]) => 
    ipcRenderer.invoke('send-discord-notification', ...args),

  getStoredItems: (...args: any[]) => 
    ipcRenderer.invoke('get-stored-items', ...args),

  addStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('add-stored-item', ...args),

  updateStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('update-stored-item', ...args),

  deleteStoredItem: (...args: any[]) => 
    ipcRenderer.invoke('delete-stored-item', ...args),

  getAppSettings: (...args: any[]) => 
    ipcRenderer.invoke('get-app-settings', ...args),

  updateAppSettings: (...args: any[]) => 
    ipcRenderer.invoke('update-app-settings', ...args),
});

export {};
